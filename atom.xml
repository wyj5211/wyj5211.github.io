<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>wyj5211的小站</title>
  
  <subtitle>折腾·学习无止境</subtitle>
  <link href="https://blog.wyj5211.top/atom.xml" rel="self"/>
  
  <link href="https://blog.wyj5211.top/"/>
  <updated>2025-01-29T02:55:56.105Z</updated>
  <id>https://blog.wyj5211.top/</id>
  
  <author>
    <name>wyj5211</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>使用 UMAF 自由调整 AMD 核显显存大小</title>
    <link href="https://blog.wyj5211.top/archives/UMAF.html"/>
    <id>https://blog.wyj5211.top/archives/UMAF.html</id>
    <published>2024-07-18T15:18:30.000Z</published>
    <updated>2025-01-29T02:55:56.105Z</updated>
    
    <content type="html"><![CDATA[<p>默认情况下，在大部分 AMD 芯片的笔记本电脑厂商以及一些 OEM 整机的 BIOS 中，可调整项被严格的限制，想要手动调整核显的显存大小非常麻烦，这时就可以使用一个第三方工具来调整，它就是 <a href="https://github.com/DavidS95/Smokeless_UMAF">UniversalAMDFormBrowser</a>  </p><hr><div class="note warning flat"><p><strong>注意</strong><br>由于该工具可以修改很多项本不应该被修改的 BIOS 设置，可能会导致 BIOS 无法正常开机自检或导致硬件损坏，使用时后果自负！  </p></div><span id="more"></span><h2 id="下载并安装-UMAF"><a href="#下载并安装-UMAF" class="headerlink" title="下载并安装 UMAF"></a>下载并安装 UMAF</h2><p>转到 <a href="https://github.com/DavidS95/Smokeless_UMAF">UMAF 的 Github 主页</a> ，直接下载文件列表中的 <code>UniversalAMDFormBrowser.zip</code><br><img src="https://static.wyj5211.top/blog/UMAF/umaf_github.jpg" alt="UniversalAMDFormBrowser.zip">  </p><ul><li>对于不方便访问 Github 的读者，这里放出一个直链（与Github中的文件一样）：<a href="https://static.wyj5211.top/blog/UMAF/UniversalAMDFormBrowser.zip">点这里下载 UniversalAMDFormBrowser.zip</a></li></ul><p>准备一个 <code>fat32</code> 文件系统的U盘，解压压缩包到U盘根目录，解压后英文如下的文件结构：<br><img src="https://static.wyj5211.top/blog/UMAF/file_tree.jpg" alt="file_tree">  </p><h2 id="关闭安全启动"><a href="#关闭安全启动" class="headerlink" title="关闭安全启动"></a>关闭安全启动</h2><p>重启电脑到 UEFI 设置中，找到 <code>安全启动</code> 或 <code>Secure Boot</code> 的选项，将其关闭（一般在“安全”或“Security”选项卡中），并保存<br><img src="https://static.wyj5211.top/blog/UMAF/secure_boot.jpg" alt="secure boot">  </p><h2 id="进入-UMAF"><a href="#进入-UMAF" class="headerlink" title="进入 UMAF"></a>进入 UMAF</h2><p>再次重启后，选择U盘启动，进入UMAF  </p><ol><li>选择 <code>Device Manager</code><br><img src="https://static.wyj5211.top/blog/UMAF/devmgr.jpg" alt="devmgr"> </li><li>进入 <code>AMD CBS</code><br><img src="https://static.wyj5211.top/blog/UMAF/amd_cbs.jpg" alt="amd cbs">  </li><li>进入 <code>NBIO Common Options</code><br><img src="https://static.wyj5211.top/blog/UMAF/nbio.jpg" alt="nbio">  </li><li>进入 <code>GFX Configuration</code><br><img src="https://static.wyj5211.top/blog/UMAF/gfx.jpg" alt="gfx">  </li><li>在选项 <code>iGPU Configuration</code> 中，选中 <code>UMA_SPECIFIED</code><br><img src="https://static.wyj5211.top/blog/UMAF/uma_specified.jpg" alt="uma_specified">  </li><li>在选项 <code>UMA Frame buffer Size</code> 中，自由调整显存大小<br><img src="https://static.wyj5211.top/blog/UMAF/buffer_size.jpg" alt="uma_buffer_size">  </li><li>按 <code>F10</code> ，输入 y 保存然后退出重启电脑，显存大小修改完成</li></ol><h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><p>借助这个工具，你也可以调整CPU超频等设置，但建议不要轻易尝试，<font color='red'>否则可能会无法开机或损坏硬件</font>  </p>]]></content>
    
    
    <summary type="html">&lt;p&gt;默认情况下，在大部分 AMD 芯片的笔记本电脑厂商以及一些 OEM 整机的 BIOS 中，可调整项被严格的限制，想要手动调整核显的显存大小非常麻烦，这时就可以使用一个第三方工具来调整，它就是 &lt;a href=&quot;https://github.com/DavidS95/Smokeless_UMAF&quot;&gt;UniversalAMDFormBrowser&lt;/a&gt;  &lt;/p&gt;
&lt;hr&gt;
&lt;div class=&quot;note warning flat&quot;&gt;&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;&lt;br&gt;由于该工具可以修改很多项本不应该被修改的 BIOS 设置，可能会导致 BIOS 无法正常开机自检或导致硬件损坏，使用时后果自负！  &lt;/p&gt;
&lt;/div&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>使用 Moonlight 和 Sunshine 自建云游戏</title>
    <link href="https://blog.wyj5211.top/archives/cloud-game.html"/>
    <id>https://blog.wyj5211.top/archives/cloud-game.html</id>
    <published>2023-12-29T15:17:12.000Z</published>
    <updated>2024-08-26T09:33:57.482Z</updated>
    
    <content type="html"><![CDATA[<div class="note info flat"><p>截至2024年8月13日，SunShine的后续更新已经使Web界面原生支持中文，设置项的位置也有较小改动，本文的操作方法可能已经过时，仅作参考  </p></div><p>B站上有UP主分析出了电脑端原神调出触屏UI的命令：<a href="https://www.bilibili.com/video/BV1ku4y1j7gL">视频链接</a><br>简单来说，就是给游戏入口程序在游戏启动时添加一段参数：  </p><pre class="line-numbers language-none"><code class="language-none">use_mobile_platform -is_cloud 1 -platform_type CLOUD_THIRD_PARTY_MOBILE<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在桌面右键新建快捷方式，浏览到原神启动程序的位置，在后面空格后直接加上参数即可：<br><img src="https://static.wyj5211.top/blog/cloud-game/link.jpg" alt="参数"><br>接下来介绍如何用 Moonlight 和 Sunshine 自建云原神  </p><span id="more"></span><h2 id="在电脑上安装-Sunshine-服务端"><a href="#在电脑上安装-Sunshine-服务端" class="headerlink" title="在电脑上安装 Sunshine 服务端"></a>在电脑上安装 Sunshine 服务端</h2><p><strong>建议全程开着魔法上网</strong>  </p><ul><li><a href="https://github.com/LizardByte/Sunshine/releases">Sunshine Github 下载页面</a>  </li><li>选择 <code>sunshine-windows-installer.exe</code> 下载</li></ul><p>安装完后右键托盘区域的 Sunshine 图标，点开 <code>Open Sunshine</code>，或者浏览器进入 <code>https://127.0.0.1:47990</code> 进入 Sunhine 的管理页面  </p><ul><li>浏览器会提示连接不安全，选择 高级-继续访问<br><img src="https://static.wyj5211.top/blog/cloud-game/unsafe.jpg" alt="unsafe"></li></ul><p>设置用户名和密码  </p><ul><li>（建议步骤）切换到 <code>Configuration</code> 在 <code>General</code> 中找到 <code>UPNP</code> 并打开<br><img src="https://static.wyj5211.top/blog/cloud-game/upnp.jpg" alt="UPNP"></li><li>然后划到页面最下方，Save - Apply</li></ul><h2 id="手机下载修改版-Moonlight-客户端"><a href="#手机下载修改版-Moonlight-客户端" class="headerlink" title="手机下载修改版 Moonlight 客户端"></a>手机下载修改版 Moonlight 客户端</h2><p>原版 Moonlight 不支持多点触控，但B站UP主 <a href="https://www.bilibili.com/video/BV1Si4y1Y7Jb">@阿西西的日常</a> 做出了修改版的 Moonlight 客户端，使其支持了多点触控：  </p><blockquote><p><a href="https://www.123pan.com/s/OavtVv-CcpJA.html">下载链接</a> 提取码：<code>axix</code>  </p></blockquote><ul><li>安装好以后，去设置中找到 <code>输入设置</code> ，关闭 <code>将触控屏作为触控板使用</code><br><img src="https://static.wyj5211.top/blog/cloud-game/close_option.jpg" alt="close_option">  </li><li>根据自己设备状态酌情调整 分辨率、帧率、码率  </li><li>回到主页，链接电脑  </li><li>Moonlight 会提示一串PIN码，记住它<br><img src="https://static.wyj5211.top/blog/cloud-game/pin_code.jpg" alt="PIN_code">  </li><li>电脑右下角会有提示，点击提示进入管理页面<br><img src="https://static.wyj5211.top/blog/cloud-game/popup.jpg" alt="popup">  </li><li>登录后输入之前手机上提示的PIN码，即可开始畅玩</li></ul><h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><p>可以去 Sunshine 的APPS管理界面手动添加原神启动项，实现 Moonlight 中直接启动  </p><pre class="line-numbers language-none"><code class="language-none">https:&#x2F;&#x2F;127.0.0.1:47990&#x2F;apps<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>参考下图填写：<br><img src="https://static.wyj5211.top/blog/cloud-game/genshin.jpg" alt="genshin"></p><h2 id="原神，启动！"><a href="#原神，启动！" class="headerlink" title="原神，启动！"></a>原神，启动！</h2><p><img src="https://static.wyj5211.top/blog/cloud-game/genshin_start.jpg" alt="启动"></p>]]></content>
    
    
    <summary type="html">&lt;div class=&quot;note info flat&quot;&gt;&lt;p&gt;截至2024年8月13日，SunShine的后续更新已经使Web界面原生支持中文，设置项的位置也有较小改动，本文的操作方法可能已经过时，仅作参考  &lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;B站上有UP主分析出了电脑端原神调出触屏UI的命令：&lt;a href=&quot;https://www.bilibili.com/video/BV1ku4y1j7gL&quot;&gt;视频链接&lt;/a&gt;&lt;br&gt;简单来说，就是给游戏入口程序在游戏启动时添加一段参数：  &lt;/p&gt;
&lt;pre class=&quot;line-numbers language-none&quot;&gt;&lt;code class=&quot;language-none&quot;&gt;use_mobile_platform -is_cloud 1 -platform_type CLOUD_THIRD_PARTY_MOBILE&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在桌面右键新建快捷方式，浏览到原神启动程序的位置，在后面空格后直接加上参数即可：&lt;br&gt;&lt;img src=&quot;https://static.wyj5211.top/blog/cloud-game/link.jpg&quot; alt=&quot;参数&quot;&gt;&lt;br&gt;接下来介绍如何用 Moonlight 和 Sunshine 自建云原神  &lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>轻量级数据库管理工具 - Adminer</title>
    <link href="https://blog.wyj5211.top/archives/adminer.html"/>
    <id>https://blog.wyj5211.top/archives/adminer.html</id>
    <published>2023-12-04T04:29:34.000Z</published>
    <updated>2024-08-26T09:20:10.654Z</updated>
    
    <content type="html"><![CDATA[<ul><li>Adminer 是一个用 PHP 编写的轻量数据库管理工具，相比于 phpmyadmin ，它体积更小，资源占用更小  </li><li>Adminer 支持的数据库类型有很多，包括但不限于 MySQL, MariaDB, PostgreSQL, SQLite, MS SQL, Oracle, Elasticsearch, MongoDB 等，还可以通过插件支持更多的数据库<br><a href="https://www.adminer.org/">Adminer 官网</a><br><a href="https://github.com/vrana/adminer">Github - Adminer</a></li></ul><span id="more"></span><hr><h2 id="使用-Docker-安装-Adminer"><a href="#使用-Docker-安装-Adminer" class="headerlink" title="使用 Docker 安装 Adminer"></a>使用 Docker 安装 Adminer</h2><p><a href="https://hub.docker.com/_/adminer">Docker Hub - Adminer</a>  </p><h3 id="拉取-Adminer-镜像"><a href="#拉取-Adminer-镜像" class="headerlink" title="拉取 Adminer 镜像"></a>拉取 Adminer 镜像</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> pull adminer<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="创建-Adminer-容器"><a href="#创建-Adminer-容器" class="headerlink" title="创建 Adminer 容器"></a>创建 Adminer 容器</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">--name</span> adminer <span class="token parameter variable">--link</span> mariadb:db <span class="token parameter variable">-p</span> <span class="token number">8080</span>:8080 <span class="token parameter variable">--restart</span><span class="token operator">=</span>unless-stopped adminer<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="参数说明："><a href="#参数说明：" class="headerlink" title="参数说明："></a>参数说明：</h4><table><thead><tr><th align="left">参数名</th><th align="left">含义</th></tr></thead><tbody><tr><td align="left">-d</td><td align="left">以daemon方式运行（后台运行）</td></tr><tr><td align="left">name</td><td align="left">容器名称</td></tr><tr><td align="left">link 容器名:db</td><td align="left">将数据库容器与adminer容器链接起来作为adminer容器中的域名’db’</td></tr><tr><td align="left">-p 主机端口:容器端口</td><td align="left">端口映射</td></tr><tr><td align="left">–restart</td><td align="left">重启策略，可选 unless-stopped,always,on-failure,no</td></tr></tbody></table><p>访问 <code>服务器IP:8080</code> 即可进入 Adminer<br>输入用户名密码登录<br><img src="https://static.wyj5211.top/blog/adminer/login.jpg" alt="Login"><br>若数据库直接运行在宿主机，为了安全起见，需要通过 docker 网卡的 IP 访问宿主机<br>大多数情况下 Docker 会将宿主机表示为 <code>docker0</code> 上的 <code>172.17.0.1</code><br>使用以下命令查看宿主机 IP  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ip</span> addr show docker0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://static.wyj5211.top/blog/adminer/ip.jpg" alt="IP">  </p><h3 id="使用插件"><a href="#使用插件" class="headerlink" title="使用插件"></a>使用插件</h3><p>添加参数 <code>-e ADMINER_PLUGINS=&quot;插件名称，用空格分开&quot;</code>  ，<a href="https://github.com/vrana/adminer/tree/master/plugins">插件列表</a>  </p><ul><li>若使用的插件需要参数，则要根据提示手动创建文件并推送至容器中</li></ul><p>例如使用 <code>login-servers</code> 插件：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> run <span class="token parameter variable">--link</span> mariadb:db <span class="token parameter variable">-p</span> <span class="token number">8080</span>:8080 <span class="token parameter variable">-e</span> <span class="token assign-left variable">ADMINER_PLUGINS</span><span class="token operator">=</span><span class="token string">'login-servers'</span> adminer<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>直接启动会直接报错  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> logs adminer<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-php" data-language="php"><code class="language-php">Unable to load plugin file "login-servers", because it has required parameters: serversCreate a file "/var/www/html/plugins-enabled/login-servers.php" with the following contents to load the plugin:<span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">require_once</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'plugins/login-servers.php'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/** Set supported servers    * @param array array($domain) or array($domain => $description) or array($category => array())    * @param string    */</span><span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">AdminerLoginServers</span><span class="token punctuation">(</span>    <span class="token variable">$servers</span> <span class="token operator">=</span> <span class="token operator">??</span><span class="token operator">?</span><span class="token punctuation">,</span>    <span class="token variable">$driver</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'server'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这是因为 <code>login-servers</code> 插件需要参数才能正常工作，所以不适用上面的方法<br>解决方法：创建 <code>login-servers.php</code> 填写以下内容  </p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">require_once</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'plugins/login-servers.php'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/** Set supported servers    * @param array array($domain) or array($domain => $description) or array($category => array())    * @param string    */</span><span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">AdminerLoginServers</span><span class="token punctuation">(</span>    <span class="token variable">$servers</span> <span class="token operator">=</span> 服务器地址<span class="token punctuation">,</span>    <span class="token variable">$driver</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'server'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>推送至容器中  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> <span class="token function">cp</span> login-servers.php adminer:/var/www/html/plugins-enabled/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后重启容器使用  </p><h3 id="使用主题"><a href="#使用主题" class="headerlink" title="使用主题"></a>使用主题</h3><p>添加参数 <code>-e ADMINER_DESIGN=&#39;主题名称&#39;</code><br><a href="https://github.com/vrana/adminer/tree/master/designs">这里是主题列表</a>  可在官网预览主题样式</p><h3 id="更多内容"><a href="#更多内容" class="headerlink" title="更多内容"></a>更多内容</h3><p>请参考这篇文章：<a href="https://blog.csdn.net/wbsu2004/article/details/121949994">CSDN - 强大的网页数据库管理工具Adminer</a></p>]]></content>
    
    
    <summary type="html">&lt;ul&gt;
&lt;li&gt;Adminer 是一个用 PHP 编写的轻量数据库管理工具，相比于 phpmyadmin ，它体积更小，资源占用更小  &lt;/li&gt;
&lt;li&gt;Adminer 支持的数据库类型有很多，包括但不限于 MySQL, MariaDB, PostgreSQL, SQLite, MS SQL, Oracle, Elasticsearch, MongoDB 等，还可以通过插件支持更多的数据库&lt;br&gt;&lt;a href=&quot;https://www.adminer.org/&quot;&gt;Adminer 官网&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/vrana/adminer&quot;&gt;Github - Adminer&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>关于邮戳的一个冷知识</title>
    <link href="https://blog.wyj5211.top/archives/china-post.html"/>
    <id>https://blog.wyj5211.top/archives/china-post.html</id>
    <published>2023-11-29T09:28:55.000Z</published>
    <updated>2024-08-26T09:20:23.432Z</updated>
    
    <content type="html"><![CDATA[<h2 id="中国邮政立大功"><a href="#中国邮政立大功" class="headerlink" title="中国邮政立大功"></a>中国邮政立大功</h2><p>网上冲浪的时候看到的冷知识<br><img src="https://static.wyj5211.top/blog/china-post/youzheng2.jpg" alt="邮政"><br>中国邮政的邮戳可以保护你的知识产权，也能保存一些证据类的文件<br>如果有要想保护的、想拥有法律效益的文件，那么就用邮政寄给自己，收到以后妥善保管，不要拆封  </p><span id="more"></span><h3 id="关于邮戳"><a href="#关于邮戳" class="headerlink" title="关于邮戳"></a>关于邮戳</h3><p>引用 <a href="https://baike.baidu.com/item/%E9%82%AE%E6%88%B3">百度百科 - 邮戳</a> 的介绍  </p><blockquote><p>邮戳，是邮政部门经办邮政通信业务使用的各种邮政戳记的统称，从功能上有销票与非销票之分。从能销票的功能而言，邮戳是邮政部门加盖在邮件和邮政业务单上表示收寄、投递局名和时间的戳记。正是由于邮戳是邮政部门在处理某项业务而留下的印记，因此，邮戳对邮政部门而言，其作用主要是反映了邮政系统作业的规范性、严肃性、可靠性和资料性。<strong>它的存在为后来查证某项业务的踪迹留下了可靠的证据，既可以考证邮政发展历史，又可以考证邮票使用的首、尾日期或邮资变化的情况，还可以验证某些不明邮戳的真伪，甚至在某些民事纠纷判决中，也常将邮戳作为物证。</strong></p></blockquote>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;中国邮政立大功&quot;&gt;&lt;a href=&quot;#中国邮政立大功&quot; class=&quot;headerlink&quot; title=&quot;中国邮政立大功&quot;&gt;&lt;/a&gt;中国邮政立大功&lt;/h2&gt;&lt;p&gt;网上冲浪的时候看到的冷知识&lt;br&gt;&lt;img src=&quot;https://static.wyj5211.top/blog/china-post/youzheng2.jpg&quot; alt=&quot;邮政&quot;&gt;&lt;br&gt;中国邮政的邮戳可以保护你的知识产权，也能保存一些证据类的文件&lt;br&gt;如果有要想保护的、想拥有法律效益的文件，那么就用邮政寄给自己，收到以后妥善保管，不要拆封  &lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>使用Vaultwarden自建密码库</title>
    <link href="https://blog.wyj5211.top/archives/self-host-vaultwarden.html"/>
    <id>https://blog.wyj5211.top/archives/self-host-vaultwarden.html</id>
    <published>2023-10-18T07:28:12.000Z</published>
    <updated>2024-08-26T09:34:56.069Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>注册了许多网站和APP，密码太多记不住？这时候就需要一个密码库来安全地储存你的密码<br>本文将介绍使用 <a href="https://github.com/dani-garcia/vaultwarden">Vaultwarden</a> 在 Ubuntu 上自建密码库的方法  </p><span id="more"></span><h2 id="关于-Vaultwarden"><a href="#关于-Vaultwarden" class="headerlink" title="关于 Vaultwarden"></a>关于 Vaultwarden</h2><p>前身为 bitwarden_rs ，引用官方的介绍  </p><blockquote><p>Alternative implementation of the Bitwarden server API written in Rust and compatible with upstream Bitwarden clients, perfect for self-hosted deployment where running the official resource-heavy service might not be ideal.  </p></blockquote><p>它是一种用 Rust 编写的可用于 <a href="https://bitwarden.com/">Bitwarden</a> 官方客户端的密码库服务端程序，适用于低配置服务器部署  </p><h2 id="第一步：安装-docker"><a href="#第一步：安装-docker" class="headerlink" title="第一步：安装 docker"></a>第一步：安装 docker</h2><h3 id="使用官方脚本直接安装"><a href="#使用官方脚本直接安装" class="headerlink" title="使用官方脚本直接安装"></a>使用官方脚本直接安装</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> <span class="token parameter variable">-fsSL</span> https://get.docker.com <span class="token parameter variable">-o</span> get-docker.sh<span class="token function">sudo</span> <span class="token function">sh</span> get-docker.sh <span class="token parameter variable">--mirror</span> Aliyun<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>等待命令执行完成后，若当前用户非 root 用户，使用以下命令将当前用户加入 docker 组，以获得 docker 访问权限  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">usermod</span> <span class="token parameter variable">-aG</span> <span class="token function">docker</span> <span class="token operator">&lt;</span>用户名<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>注销然后重新登录，否则会报错  </p><h3 id="配置-docker-镜像源以加速下载"><a href="#配置-docker-镜像源以加速下载" class="headerlink" title="配置 docker 镜像源以加速下载"></a>配置 docker 镜像源以加速下载</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">vi</span> /etc/docker/daemon.json<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>文件中填入  </p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span><span class="token property">"registry-mirrors"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"http://hub-mirror.c.163.com"</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>保存退出，重启 docker  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> systemctl daemon-reload<span class="token function">sudo</span> systemctl restart <span class="token function">docker</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>输入以下命令验证  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> info<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>输出有类似这样的结果  </p><pre class="line-numbers language-none"><code class="language-none">Client: Docker Engine - Community Version:    24.0.7 Context:    default Debug Mode: false Plugins:  buildx: Docker Buildx (Docker Inc.)    Version:  v0.11.2    Path:     &#x2F;usr&#x2F;libexec&#x2F;docker&#x2F;cli-plugins&#x2F;docker-buildx  compose: Docker Compose (Docker Inc.)    Version:  v2.21.0    Path:     &#x2F;usr&#x2F;libexec&#x2F;docker&#x2F;cli-plugins&#x2F;docker-composeServer: Containers: 0  Running: 0  Paused: 0  Stopped: 0 Images: 0 Server Version: 24.0.7 Storage Driver: overlay2  Backing Filesystem: extfs  Supports d_type: true  Using metacopy: false  Native Overlay Diff: true  userxattr: false Logging Driver: json-file Cgroup Driver: systemd Cgroup Version: 2 Plugins:  Volume: local  Network: bridge host ipvlan macvlan null overlay  Log: awslogs fluentd gcplogs gelf journald json-file local logentries splunk syslog Swarm: inactive Runtimes: runc io.containerd.runc.v2 Default Runtime: runc Init Binary: docker-init containerd version: 61f9fd88f79f081d64d6fa3bb1a0dc71ec870523 runc version: v1.1.9-0-gccaecfc init version: de40ad0 Security Options:  apparmor  seccomp   Profile: builtin  cgroupns Kernel Version: 5.15.0-88-generic Operating System: Ubuntu 22.04.2 LTS OSType: linux Architecture: x86_64 CPUs: 6 Total Memory: 3.785GiB Name: ubuntu-server ID: c1384daf-2eb5-4573-b297-7220afd8a46b Docker Root Dir: &#x2F;var&#x2F;lib&#x2F;docker Debug Mode: false Experimental: false Insecure Registries:  127.0.0.0&#x2F;8 Registry Mirrors:  http:&#x2F;&#x2F;hub-mirror.c.163.com&#x2F; Live Restore Enabled: false<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="第二步：拉取镜像并创建容器"><a href="#第二步：拉取镜像并创建容器" class="headerlink" title="第二步：拉取镜像并创建容器"></a>第二步：拉取镜像并创建容器</h2><h3 id="拉取-Vaultwarden-镜像"><a href="#拉取-Vaultwarden-镜像" class="headerlink" title="拉取 Vaultwarden 镜像"></a>拉取 Vaultwarden 镜像</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> pull vaultwarden/server:1.30.0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使用了docker镜像源一定要再拉取的镜像末尾加上确切的版本号，以免镜像源的 <code>latest</code> 与官方源版本不同，会造成bitwarden客户端不兼容<br>具体版本号可在这里查看：<a href="https://hub.docker.com/r/vaultwarden/server/tags">Docker Hub - vaultwarden&#x2F;server</a>  </p><h3 id="创建-Vaultwarden-容器"><a href="#创建-Vaultwarden-容器" class="headerlink" title="创建 Vaultwarden 容器"></a>创建 Vaultwarden 容器</h3><p>数据储存目录和初始管理员密码按需修改，这里使用8080端口搭建  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">--name</span> vaultwarden <span class="token parameter variable">-v</span> /path/to/vaultwarden数据储存目录:/data <span class="token parameter variable">--restart</span> unless-stopped <span class="token parameter variable">-p</span> <span class="token number">8080</span>:80 <span class="token parameter variable">-e</span> <span class="token assign-left variable">ADMIN_TOKEN</span><span class="token operator">=</span><span class="token punctuation">(</span>初始管理员密码<span class="token punctuation">)</span> vaultwarden/server:1.30.0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这时候输入服务器 IP 或域名就能访问到 vaultwarden 主界面了<br><img src="https://static.wyj5211.top/blog/self-host-vaultwarden/vaultwarden-main.jpg" alt="vaultwarden主界面"></p><p><strong>但这时候还不能正常使用，需要配置 https</strong>  </p><h2 id="第三步：配置-https"><a href="#第三步：配置-https" class="headerlink" title="第三步：配置 https"></a>第三步：配置 https</h2><h3 id="安装-nginx-用于-https-反代"><a href="#安装-nginx-用于-https-反代" class="headerlink" title="安装 nginx 用于 https 反代"></a>安装 nginx 用于 https 反代</h3><p>现代浏览器在http下无法再正常使用 vaultwarden ，因此需要通过 nginx 反代出 https 来使用  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> nginx-core<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="申请-SSL-证书"><a href="#申请-SSL-证书" class="headerlink" title="申请 SSL 证书"></a>申请 SSL 证书</h3><p>若为本地部署或局域网部署可以跳过此步骤<br>本文在 zerossl 上获取免费证书，其他方式也大同小异<br>进入 <a href="https://zerossl.com/">zerossl 官网</a>  </p><ul><li>首页巨大的输入框里直接输入你的域名或IP<br>zerossl 是支持获取纯 IP SSL 证书的，国内服务器不想备案可以直接用 IP 并换端口访问<br><img src="https://static.wyj5211.top/blog/self-host-vaultwarden/zerossl1.jpg" alt="zerossl"></li><li>然后就会跳转到注册&#x2F;登录界面，登录已有账号或者注册新账号  </li><li>下一步根据需要选择不同有效期的证书<br><img src="https://static.wyj5211.top/blog/self-host-vaultwarden/zerossl2.jpg" alt="选择证书"></li><li>下一步保持默认，让他自动生成CSR  </li><li>下一步选择默认的计划  </li><li>然后就到了域名验证阶段，三种方式任君选择。<br>如果申请的是 IP SSL 证书，就只能用最后一种文件验证的方式<br><img src="https://static.wyj5211.top/blog/self-host-vaultwarden/zerossl3.jpg" alt="验证域名"><br>根据页面提示完成验证  </li><li>验证完成后下载证书<br><img src="https://static.wyj5211.top/blog/self-host-vaultwarden/zerossl4.jpg" alt="下载证书">  </li><li>下一步，你可以直接按照页面给出的 <a href="https://help.zerossl.com/hc/en-us/articles/360058295094-Before-Installation">help center</a> 中找到各种场景安装 SSL 证书的教程</li><li>将证书上传到服务器，并解压到一个文件夹中  </li><li>合并证书链    <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cat</span> certificate.crt ca_bundle.crt <span class="token operator">>></span> ssl.crt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>编辑 nginx 站点配置文件<br>为方便，这里直接以默认站点文件演示，注意备份！    <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">vi</span> /etc/nginx/sites-available/default<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>  在文件末尾粘贴以下内容    <pre class="line-numbers language-conf" data-language="conf"><code class="language-conf">server &#123;    listen               443 ssl;        ssl_certificate      &#x2F;etc&#x2F;ssl&#x2F;ssl.crt;     ssl_certificate_key  &#x2F;etc&#x2F;ssl&#x2F;private.key;         server_name  your.domain.com;    access_log   &#x2F;var&#x2F;log&#x2F;nginx&#x2F;nginx.vhost.access.log;    error_log    &#x2F;var&#x2F;log&#x2F;nginx&#x2F;nginx.vhost.error.log;    location     &#x2F; &#123;            proxy_pass http:&#x2F;&#x2F;127.0.0.1:8080;            proxy_set_header Host $host;            proxy_set_header X-Real-IP $remote_addr;            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>重启 nginx    <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> /etc/init.d/nginx restart<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h2 id="第四步：创建账户"><a href="#第四步：创建账户" class="headerlink" title="第四步：创建账户"></a>第四步：创建账户</h2><ul><li>访问 <code>https://服务器IP或域名</code> ，进入 vaultwarden 网页密码库，根据要求创建账户  </li><li>创建完成后，进入管理页面 <code>https://服务器IP或域名/admin</code> ，输入之前设置的 <code>ADMIN_TOKEN</code> ，可以在这里调整设置  </li><li>建议创建好需要的账户以后，关闭新用户注册，在 <code>General settings</code> 下，取消勾选 <code>Allow new signups</code><br><img src="https://static.wyj5211.top/blog/self-host-vaultwarden/vaultwarden-admin.jpg" alt="关闭新用户注册"></li></ul><h3 id="（可选）删除-ADMIN-TOKEN"><a href="#（可选）删除-ADMIN-TOKEN" class="headerlink" title="（可选）删除 ADMIN_TOKEN"></a>（可选）删除 <code>ADMIN_TOKEN</code></h3><p>配置完成后，安全起见，删除容器环境变量中的 <code>ADMIN_TOKEN</code>  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> container stop vaultwarden<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> container <span class="token function">rm</span> vaultwarden<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>复制之前第一次创建容器的命令，删除 <code>-e ADMIN_TOKEN=xxx</code> 再重新创建容器  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">--name</span> vaultwarden <span class="token parameter variable">-v</span> /path/to/vaultwarden数据储存目录:/data <span class="token parameter variable">--restart</span> unless-stopped <span class="token parameter variable">-p</span> <span class="token number">8080</span>:80 vaultwarden/server:1.30.0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>此时管理面板将不能再访问  </p><h2 id="第五步：配置客户端"><a href="#第五步：配置客户端" class="headerlink" title="第五步：配置客户端"></a>第五步：配置客户端</h2><ul><li>登录界面邮件地址下方下拉框选择 <code>自托管</code> ，输入 <code>https://服务器IP或域名</code><br><img src="https://static.wyj5211.top/blog/self-host-vaultwarden/client.jpg" alt="PC">  </li><li>登录并开始使用</li></ul><h2 id="补充说明"><a href="#补充说明" class="headerlink" title="补充说明"></a>补充说明</h2><ul><li>若使用国内云服务器搭建，记得去云服务器控制台放行端口  </li><li>若使用国外云服务器搭建，有些服务商需要去控制台放行端口，而也有一些服务商默认不开防火墙，需要在操作系统中放行端口  </li><li>以 vultr 的 Ubuntu 服务器为例，使用以下命令放行端口    <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ufw allow 端口号<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;注册了许多网站和APP，密码太多记不住？这时候就需要一个密码库来安全地储存你的密码&lt;br&gt;本文将介绍使用 &lt;a href=&quot;https://github.com/dani-garcia/vaultwarden&quot;&gt;Vaultwarden&lt;/a&gt; 在 Ubuntu 上自建密码库的方法  &lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>基于哆点web认证的校园网自动登录</title>
    <link href="https://blog.wyj5211.top/archives/campus-network-autologin-drcom.html"/>
    <id>https://blog.wyj5211.top/archives/campus-network-autologin-drcom.html</id>
    <published>2023-09-05T14:27:34.000Z</published>
    <updated>2024-08-26T09:21:34.487Z</updated>
    
    <content type="html"><![CDATA[<p>高考成功考入合工大，发现这里的校园网认证方式是哆点的web认证，本着能少一步是一步的原则，成功探索出校园网自动登录的方法，手机电脑均可操作  </p><hr><span id="more"></span><h2 id="先决条件"><a href="#先决条件" class="headerlink" title="先决条件"></a>先决条件</h2><p>合工大校园网认证方式为<strong>哆点web认证</strong>，不限制终端数量，可以自己接路由器享受500M（可能还要高）的联通网，但是有时间限制<br>web认证界面是下面这样的<br><img src="https://static.wyj5211.top/blog/campus-network-autologin-drcom/login-page.jpg"></p><h2 id="手机端操作"><a href="#手机端操作" class="headerlink" title="手机端操作"></a>手机端操作</h2><ol><li>先安装好 <code>HttpCanary</code> ，进入软件设置，安装 <code>HttpCanary根证书</code> ，这里选择 <strong>导出HttpCanary根证书</strong> 选项，去手机系统设置中手动安装<br><img src="https://static.wyj5211.top/blog/campus-network-autologin-drcom/rootCA.jpg">  </li><li>将证书导出到特定位置后，去系统设置搜索 <strong>安装证书</strong> ，选择 <strong>CA证书</strong> ，根据系统引导一步步安装  </li><li>回到HttpCanary主界面，点击右下角小飞机开始抓包  </li><li>打开浏览器，进入校园网认证界面（我这边是<code>http://172.18.3.3</code>，或者访问任意没有访问过的网站，应该会自动跳转到登录界面）  </li><li>操作一遍校园网登录，然后回到HttpCanary，右下角按钮停止抓包，找到抓包列表里的 <code>POST</code> 请求<br><img src="https://static.wyj5211.top/blog/campus-network-autologin-drcom/post.jpg">  </li><li>长按复制-复制为cURL<br><img src="https://static.wyj5211.top/blog/campus-network-autologin-drcom/curl.jpg">  </li><li>跳转到 <a href="#%E8%B7%AF%E7%94%B1%E5%99%A8%E6%93%8D%E4%BD%9C">路由器操作</a></li></ol><h2 id="电脑操作"><a href="#电脑操作" class="headerlink" title="电脑操作"></a>电脑操作</h2><ol><li>打开浏览器，进入校园网登录界面，按键 <code>F12</code> 打开devtools  </li><li>切换到 <code>网络</code> 选项卡，并勾选 <code>保留日志</code><br><img src="https://static.wyj5211.top/blog/campus-network-autologin-drcom/devtools.jpg" alt="devtools">  </li><li>操作一遍校园网登录  </li><li>右键下面的 <code>名称</code> ，勾选 <code>方法</code><br><img src="https://static.wyj5211.top/blog/campus-network-autologin-drcom/menu.jpg">  </li><li>找到其中的 <strong>POST请求</strong><br><img src="https://static.wyj5211.top/blog/campus-network-autologin-drcom/post1.jpg">  </li><li>右键 复制-复制为cURL(bash)<br><img src="https://static.wyj5211.top/blog/campus-network-autologin-drcom/CopyAsCURL.jpg"></li></ol><h2 id="路由器操作"><a href="#路由器操作" class="headerlink" title="路由器操作"></a>路由器操作</h2><p>以刷了老毛子固件的小米路由器R3G为例  </p><ol><li>先去路由器后台-系统管理-服务，开启ssh<br><img src="https://static.wyj5211.top/blog/campus-network-autologin-drcom/ssh.jpg" alt="ssh"><br>ssh公钥可选，想快捷登录的话可以配置一下  </li><li>用ssh登录路由器，默认情况下用户名与密码都是 <code>admin</code>   <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ssh</span> admin@192.168.123.1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>粘贴刚才复制的curl命令测试  </li><li>编写脚本，这里必须在 <code>/etc/storage</code> 中写入脚本 <code>auto-login.sh</code> ，才能保存到路由器闪存<br>示例脚本内容如下，curl的参数可以选择性删除，但必须保留 <code>Cookie</code> 后的参数：   <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/sh</span><span class="token function">sleep</span> <span class="token number">10</span>logger <span class="token parameter variable">-t</span> web-login <span class="token string">"开始校园网认证"</span><span class="token function">curl</span> <span class="token parameter variable">-X</span> POST <span class="token parameter variable">-H</span> <span class="token string">"Host:172.18.3.3"</span> <span class="token parameter variable">-H</span> <span class="token string">"Origin:http://172.18.3.3"</span> <span class="token parameter variable">-H</span> <span class="token string">"Cookie:drcom_login=学号%7C密码"</span> <span class="token parameter variable">-d</span> <span class="token string">"DDDDD=学号&amp;upass=xxxxxxxxxxxxxxxxxxxx&amp;R2=1&amp;para=00&amp;0MKKey=123456&amp;R6=1"</span> <span class="token string">"http://172.18.3.3/a30.htm"</span>logger <span class="token parameter variable">-t</span> web-login <span class="token string">"已执行校园网认证"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>回到路由器后台，系统管理-恢复&#x2F;导出&#x2F;上传设置-页面最下方 <code>保存/etc/storage内容到闪存</code><br><img src="https://static.wyj5211.top/blog/campus-network-autologin-drcom/save.jpg" alt="save">  </li><li>路由器后台，自定义设置-脚本-在 WAN 上行&#x2F;下行启动后执行 中，添加一行   <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">/etc/storage/auto-login.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre> <img src="https://static.wyj5211.top/blog/campus-network-autologin-drcom/script.jpg">  </li><li>注销校园网后重启路由器  </li><li>Enjoy!!!<br><img src="https://static.wyj5211.top/blog/campus-network-autologin-drcom/speedtest.jpg"></li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;高考成功考入合工大，发现这里的校园网认证方式是哆点的web认证，本着能少一步是一步的原则，成功探索出校园网自动登录的方法，手机电脑均可操作  &lt;/p&gt;
&lt;hr&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>使用CaptchaPlus插件给typecho添加评论验证码</title>
    <link href="https://blog.wyj5211.top/archives/typecho-CaptchaPlus.html"/>
    <id>https://blog.wyj5211.top/archives/typecho-CaptchaPlus.html</id>
    <published>2023-08-15T13:26:03.000Z</published>
    <updated>2024-08-26T09:23:43.148Z</updated>
    
    <content type="html"><![CDATA[<div class="note info flat"><p>注意：博客目前已迁移到hexo博客框架，本文内容可能已经过时，仅供参考  </p></div><p>博客评论区本是读者们交流的地方，但总会防不住有垃圾评论的出现，它们多数由机器自动发送，因此添加人机验证便是防范机器人自动刷评论的好方法<br>一些主题（例如本博客之前使用过的<a href="https://github.com/wehaox/Typecho-Butterfly">Butterfly主题</a>）自带了人机验证模块，只需要在主题设置中启用即可，但对于没有这个功能的主题就需要借助插件来实现  </p><span id="more"></span><h3 id="CaptchaPlus插件"><a href="#CaptchaPlus插件" class="headerlink" title="CaptchaPlus插件"></a>CaptchaPlus插件</h3><p>在查找过许多人机验证插件后，博主认为最好用的一款是 CaptchaPlus 插件：<br><a href="https://github.com/scenery/typecho-plugins">Github 项目主页</a>  </p><ol><li>克隆或直接网页端打包下载，然后将 <code>CaptchaPlus</code> 文件夹上传到 Typecho 网站目录 <code>/usr/plugins/</code> 文件夹  </li><li>进入博客后台，控制台-插件 中找到 <code>CaptchaPlus</code> 并启用  </li><li>打开 &#x2F;usr&#x2F;themes&#x2F; 你的主题目录下 comments.php 文件，在提交按钮前面&#x2F;后面插入以下代码：   <pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">array_key_exists</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'CaptchaPlus'</span><span class="token punctuation">,</span> <span class="token class-name static-context">Typecho_Plugin</span><span class="token operator">::</span><span class="token function">export</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'activated'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token class-name static-context">CaptchaPlus_Plugin</span><span class="token operator">::</span><span class="token function">output</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">endif</span><span class="token punctuation">;</span> <span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><ul><li>注入人机验证模块后，提交评论的区域界面渲染可能会出错，例如本博客使用的 Jasmine 主题会出现提交评论按钮漂移的问题：<br><img src="https://static.wyj5211.top/blog/typecho-CaptchaPlus/submit-button-error.webp" alt="Alt text"><br>需要稍微修改css，我的解决方法是直接在 <code>button</code> 标签内加内联css，强制将按钮调整到右侧：<br><img src="https://static.wyj5211.top/blog/typecho-CaptchaPlus/submit-button.webp" alt="Alt text">  <pre class="line-numbers language-css" data-language="css"><code class="language-css">style=<span class="token string">"float: right;"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><ol start="4"><li>网站管理员登录后不用进行验证，可直接提交评论。如果用户&#x2F;游客提交评论失败，可能是开启了评论反垃圾保护导致，在网站后台-设置-评论里关闭，或者在主题目录下的 <code>functions.php</code> 文件中找到 <code>function themeInit()</code> 函数，里面添加：   <pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token variable">$options</span> <span class="token operator">=</span> <span class="token class-name static-context">Helper</span><span class="token operator">::</span><span class="token function">options</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$options</span> <span class="token operator">-></span> <span class="token property">commentsAntiSpam</span> <span class="token operator">=</span> <span class="token constant boolean">false</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ol><h3 id="注册hCaptcha"><a href="#注册hCaptcha" class="headerlink" title="注册hCaptcha"></a>注册hCaptcha</h3><p>这个插件支持 hCaptcha 和 Cloudflare Turnstile 验证码，这里以 hCaptcha 作为示例  </p><ol><li>注册地址：<a href="https://dashboard.hcaptcha.com/signup">https://dashboard.hcaptcha.com/signup</a>  </li><li>注册完先点击右上角头像进入 <code>Settings</code> ，将界面语言改成中文，并复制 <code>Secret key</code><br><img src="https://static.wyj5211.top/blog/typecho-CaptchaPlus/hcaptcha1.webp" alt="Alt text"></li><li>进入右上角的<code>网站</code>，点击搜索框旁边的<code>新网站</code>，直接转到下面的 <code>General Information</code>  </li><li>填入域名并选择难度，右上角保存<br><img src="https://static.wyj5211.top/blog/typecho-CaptchaPlus/hcaptcha2.webp" alt="Alt text"></li><li>然后在网站列表处点击前面的字符复制 <code>Site Key</code><br><img src="https://static.wyj5211.top/blog/typecho-CaptchaPlus/hcaptcha3.webp" alt="Alt text"></li></ol><h3 id="配置插件"><a href="#配置插件" class="headerlink" title="配置插件"></a>配置插件</h3><p>回到 Typecho 后台，进入插件设置，填入 <code>Secret Key</code> 和 <code>Site Key</code> ，其余配置自行调整，保存后即可查看效果<br><img src="https://static.wyj5211.top/blog/typecho-CaptchaPlus/hcaptcha4.webp" alt="Alt text"><br>启用后效果：<br><img src="https://static.wyj5211.top/blog/typecho-CaptchaPlus/hcaptcha5.webp" alt="Alt text"> </p>]]></content>
    
    
    <summary type="html">&lt;div class=&quot;note info flat&quot;&gt;&lt;p&gt;注意：博客目前已迁移到hexo博客框架，本文内容可能已经过时，仅供参考  &lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;博客评论区本是读者们交流的地方，但总会防不住有垃圾评论的出现，它们多数由机器自动发送，因此添加人机验证便是防范机器人自动刷评论的好方法&lt;br&gt;一些主题（例如本博客之前使用过的&lt;a href=&quot;https://github.com/wehaox/Typecho-Butterfly&quot;&gt;Butterfly主题&lt;/a&gt;）自带了人机验证模块，只需要在主题设置中启用即可，但对于没有这个功能的主题就需要借助插件来实现  &lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>舟游博士工具推荐 - MAA</title>
    <link href="https://blog.wyj5211.top/archives/maa.html"/>
    <id>https://blog.wyj5211.top/archives/maa.html</id>
    <published>2023-07-12T04:25:00.000Z</published>
    <updated>2024-08-26T09:25:28.611Z</updated>
    
    <content type="html"><![CDATA[<p>它是长草博士的利器，只需点点按钮，即可完成方舟打工人的工作<br>它是抄作业博士的利器，只需输入作业代码，即可完美3星甚至是4星通关<br>它就是 MAA - Maa Assistant Arknights</p><span id="more"></span><h2 id="Maa-Assistant-Arknights"><a href="#Maa-Assistant-Arknights" class="headerlink" title="Maa Assistant Arknights"></a>Maa Assistant Arknights</h2><p><img src="https://gcore.jsdelivr.net/gh/MaaAssistantArknights/design@main/logo/maa-logo_512x512.png" alt="MAA Logo">  </p><p>官网介绍：</p><div class="note success flat"><p>MAA 的意思是 MAA Assistant Arknights   </p></div><p>一款明日方舟游戏小助手<br>基于图像识别技术，一键完成全部日常任务！  </p><h2 id="亮点功能"><a href="#亮点功能" class="headerlink" title="亮点功能"></a>亮点功能</h2><ul><li>刷理智，掉落识别及上传 <a href="https://penguin-stats.cn/">企鹅物流</a>  </li><li>智能基建换班，自动计算干员效率，单设施内最优解；同时也支持自定义排班  </li><li>自动公招，可选使用加急许可，一次全部刷完！公招数据上传 <a href="https://penguin-stats.cn/">企鹅物流</a>，<a href="https://yituliu.site/maarecruitdata">一图流</a>  </li><li>访问好友、收取信用及购物、领取日常奖励等。一键全日常自动长草！  </li><li>肉鸽全自动刷源石锭和蜡烛，自动识别干员及练度  </li><li>选择作业 JSON 文件，自动抄作业！  </li><li>仓库识别并支持导出至 <a href="https://penguin-stats.cn/planner">企鹅物流刷图规划器</a>, <a href="https://arkn.lolicon.app/#/material">明日方舟工具箱</a>, <a href="https://ark-nights.com/settings">ARK-NIGHTS 干员培养表</a>  </li><li>支持 C, Python, Java, Rust, Golang, Java HTTP, Rust HTTP 等多种接口，方便集成调用，自定义你的 MAA！  </li><li>更多功能持续添加中…</li></ul><h2 id="截图"><a href="#截图" class="headerlink" title="截图"></a>截图</h2><p>一键长草：<br><img src="https://static.wyj5211.top/blog/maa/maa-1.jpg" alt="一键长草"><br>自动战斗：<br><img src="https://static.wyj5211.top/blog/maa/maa-2.jpg" alt="自动战斗"><br>小工具：<br><img src="https://static.wyj5211.top/blog/maa/maa-3.jpg" alt="小工具"><br>设置：<br><img src="https://static.wyj5211.top/blog/maa/maa-4.jpg" alt="设置">  </p><h2 id="相关地址"><a href="#相关地址" class="headerlink" title="相关地址"></a>相关地址</h2><ul><li><a href="https://maa.plus/">官网</a>  </li><li><a href="https://github.com/MaaAssistantArknights/MaaAssistantArknights/releases">下载地址</a>（也可以在官网下载）  </li><li><a href="https://maa.plus/docs/">使用文档</a>  </li><li><a href="https://github.com/MaaAssistantArknights/MaaAssistantArknights">开源地址</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;它是长草博士的利器，只需点点按钮，即可完成方舟打工人的工作&lt;br&gt;它是抄作业博士的利器，只需输入作业代码，即可完美3星甚至是4星通关&lt;br&gt;它就是 MAA - Maa Assistant Arknights&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>对交管12123完美隐藏root</title>
    <link href="https://blog.wyj5211.top/archives/hide-root-jiaoguan12123.html"/>
    <id>https://blog.wyj5211.top/archives/hide-root-jiaoguan12123.html</id>
    <published>2023-06-30T11:53:46.000Z</published>
    <updated>2024-08-26T09:27:36.073Z</updated>
    
    <content type="html"><![CDATA[<div class="note info flat"><p>注意，这篇文章涉及的软件版本可能已经过时，内容仅供参考  </p></div><h2 id="开篇吐槽"><a href="#开篇吐槽" class="headerlink" title="开篇吐槽"></a>开篇吐槽</h2><p>众所周知，交管12123对magisk和zygisk的检测能力秒杀一众银行软件，有时候momo检测能过、银行软件检测能过的环境，交管12123照样给你闪退<br>好在magisk有许多衍生版本，其中第三方的Alpha版本完美地解决了这个问题  </p><div class="note success flat"><p>仅在以MIUI为系统的小米手机上测试，其他厂商不保证可用（例如绿厂解bl后直接tee损坏，会影响root的隐藏）  </p></div><span id="more"></span><h2 id="如何操作"><a href="#如何操作" class="headerlink" title="如何操作"></a>如何操作</h2><h3 id="下载安装Magisk-Alpha特定版本"><a href="#下载安装Magisk-Alpha特定版本" class="headerlink" title="下载安装Magisk Alpha特定版本"></a>下载安装Magisk Alpha特定版本</h3><p>目前多位用户验证确定Magisk Alpha的<code>83d837d8-alpha</code>版本能完美隐藏root<br><a href="https://wyj5211.lanzoum.com/iBmvv13d8hwf">点这里下载</a>  </p><p>注意一定要这个版本，最新版莫名奇妙会被momo检测到zygisk<br><img src="https://static.wyj5211.top/blog/hide-root-jiaoguan12123/magisk-alpha.jpg" alt="Magisk Alpha"><br>安装完后修补boot获取root，若是从其他magisk版本迁移过来，打开软件授权root后可直接在Alpha内选<code>直接安装</code><br><img src="https://static.wyj5211.top/blog/hide-root-jiaoguan12123/magisk-install.jpg" alt="直接安装"><br>安装完重启，然后在Alpha的设置里打开<code>Zygisk</code>，并在下面隐藏magisk应用  </p><h3 id="下载Shamiko模块、Universal-SafetyNet-Fix模块、并下载momo来检测隐藏效果"><a href="#下载Shamiko模块、Universal-SafetyNet-Fix模块、并下载momo来检测隐藏效果" class="headerlink" title="下载Shamiko模块、Universal SafetyNet Fix模块、并下载momo来检测隐藏效果"></a>下载Shamiko模块、Universal SafetyNet Fix模块、并下载momo来检测隐藏效果</h3><p>Shamiko：<a href="https://github.com/LSPosed/LSPosed.github.io/releases">Github Releases</a><br>下载0.7+的任意版本，当然越新越好，有<code>Requires Magisk 26000+</code>就行<br><img src="https://static.wyj5211.top/blog/hide-root-jiaoguan12123/shamiko.jpg" alt="Shamiko"><br>Universal SafetyNet Fix：<a href="https://github.com/oxy2ray/safetynet-fix/releases/tag/v2.4.0_MOD">Github Releases</a><br>momo：<a href="https://wwr.lanzoui.com/iUX8H0x3kdqb">蓝奏云</a>   </p><h3 id="在Magisk-Alpha中刷入模块"><a href="#在Magisk-Alpha中刷入模块" class="headerlink" title="在Magisk Alpha中刷入模块"></a>在Magisk Alpha中刷入模块</h3><p>非常简单，不再赘述，刷完记得重启  </p><h3 id="对目标APP隐藏root"><a href="#对目标APP隐藏root" class="headerlink" title="对目标APP隐藏root"></a>对目标APP隐藏root</h3><ol><li>打开Alpha进入右上角设置  </li><li>保持遵守排除列表未勾选  </li><li>点击下面的<code>配置排除列表</code>  </li><li>搜索“交管12123”，出结果后点击它的图标展开所有选项，直接点击右上角的方框全部勾选<br><img src="https://static.wyj5211.top/blog/hide-root-jiaoguan12123/magisk-hide.jpg" alt=" 勾选交管12123">  </li><li>momo也是这样操作</li></ol><h2 id="检验成果"><a href="#检验成果" class="headerlink" title="检验成果"></a>检验成果</h2><p>打开<code>momo</code>，若你的结果是这样，或者报可疑：详情提示已打开调试模式，那么就成功了<br><img src="https://static.wyj5211.top/blog/hide-root-jiaoguan12123/momo.jpg" alt="momo"><br>如果有问题，就去检查前面的步骤是否有遗漏<br>接下来就可以打开<code>交管12123</code>了，注册完退出应用再多进去几次，能保持三分钟以上它不闪退，点击办理业务之类不报异常就算成功  </p><h3 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h3><p>如果你的手机在以上操作以后还是被momo检测到如下情况：数据未加密，挂载参数被修改<br><img src="https://static.wyj5211.top/blog/hide-root-jiaoguan12123/momo-unencrypted.jpg" alt="数据未加密，挂载参数被修改"><br>那么你的手机应该使用的不是原厂ROM，请试试刷入这个模块：<br><a href="https://wyj5211.lanzoum.com/iykmJ13ds8kj">System false encryption</a>  </p><div class="note warning flat"><p><strong>注意：</strong>此模块会导致部分刷入了强制解密的官改包的设备开机卡第二屏，请自行尝试  </p></div><p>TEE损坏对国内app影响不大，一般情况下也不好修复，建议自行搜索其他教程  </p>]]></content>
    
    
    <summary type="html">&lt;div class=&quot;note info flat&quot;&gt;&lt;p&gt;注意，这篇文章涉及的软件版本可能已经过时，内容仅供参考  &lt;/p&gt;
&lt;/div&gt;
&lt;h2 id=&quot;开篇吐槽&quot;&gt;&lt;a href=&quot;#开篇吐槽&quot; class=&quot;headerlink&quot; title=&quot;开篇吐槽&quot;&gt;&lt;/a&gt;开篇吐槽&lt;/h2&gt;&lt;p&gt;众所周知，交管12123对magisk和zygisk的检测能力秒杀一众银行软件，有时候momo检测能过、银行软件检测能过的环境，交管12123照样给你闪退&lt;br&gt;好在magisk有许多衍生版本，其中第三方的Alpha版本完美地解决了这个问题  &lt;/p&gt;
&lt;div class=&quot;note success flat&quot;&gt;&lt;p&gt;仅在以MIUI为系统的小米手机上测试，其他厂商不保证可用（例如绿厂解bl后直接tee损坏，会影响root的隐藏）  &lt;/p&gt;
&lt;/div&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>软件分享 - 随机点名软件</title>
    <link href="https://blog.wyj5211.top/archives/RandomRollCall.html"/>
    <id>https://blog.wyj5211.top/archives/RandomRollCall.html</id>
    <published>2023-06-08T12:10:45.000Z</published>
    <updated>2024-08-26T09:29:37.980Z</updated>
    
    <content type="html"><![CDATA[<p>用Visual Studio和VB.Net随便写的程序，班里面点名用的<br>初学者水平（靠必修三数学书和高一时期为数不多的计算机课学的VB），功能简陋但够用<br>代码可能让人<strong>非常头疼</strong>，但是该有的注释都有，应该能看得懂<br>有用的话可以点个⭐</p><span id="more"></span><h2 id="软件截图"><a href="#软件截图" class="headerlink" title="软件截图"></a>软件截图</h2><p>主界面：<br><img src="https://static.wyj5211.top/blog/RandomRollCall/%E9%9A%8F%E6%9C%BA%E7%82%B9%E5%90%8D1.jpg" alt="主界面"><br>设定数字：<br><img src="https://static.wyj5211.top/blog/RandomRollCall/%E9%9A%8F%E6%9C%BA%E7%82%B9%E5%90%8D3.jpg" alt="设定数字"><br>抽取结果：<br><img src="https://static.wyj5211.top/blog/RandomRollCall/%E9%9A%8F%E6%9C%BA%E7%82%B9%E5%90%8D2.jpg" alt="抽取结果">  </p><h2 id="下载地址"><a href="#下载地址" class="headerlink" title="下载地址"></a>下载地址</h2><p><a href="https://github.com/wyj5211/RandomRollCall/releases">Github Releases</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;用Visual Studio和VB.Net随便写的程序，班里面点名用的&lt;br&gt;初学者水平（靠必修三数学书和高一时期为数不多的计算机课学的VB），功能简陋但够用&lt;br&gt;代码可能让人&lt;strong&gt;非常头疼&lt;/strong&gt;，但是该有的注释都有，应该能看得懂&lt;br&gt;有用的话可以点个⭐&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>给MTK芯片的杂牌设备获取root</title>
    <link href="https://blog.wyj5211.top/archives/mtk-root.html"/>
    <id>https://blog.wyj5211.top/archives/mtk-root.html</id>
    <published>2023-02-04T07:31:58.000Z</published>
    <updated>2024-08-26T09:30:06.923Z</updated>
    
    <content type="html"><![CDATA[<h2 id="关于"><a href="#关于" class="headerlink" title="关于"></a>关于</h2><p>家里人买了一台mtk芯片的杂牌“学习平板”，这篇文章是我给它刷入magisk的折腾过程<br>提示：这篇文章可能也适用于一部分mtk芯片的山寨机，或者是一些年久失修，无法得到官方维护的mtk芯片手机  </p><span id="more"></span><hr><h2 id="开始搞机"><a href="#开始搞机" class="headerlink" title="开始搞机"></a>开始搞机</h2><h3 id="平板准备"><a href="#平板准备" class="headerlink" title="平板准备"></a>平板准备</h3><p>先去打开 <code>开发者模式</code><br>在关于设备那里连续点击7次以上<code>版本号</code> 就会有toast提示已打开开发者模式<br><img src="https://static.wyj5211.top/blog/mtk-root/mtk-pad-click7times.webp" alt="打开开发者模式"><br>接着去开发者选项里面打开<code>oem解锁</code>，我这里是解过bl锁了所以灰色，并往下翻找到<code>usb调试</code>并打开<br><img src="https://static.wyj5211.top/blog/mtk-root/mtk-root-developer.webp" alt="开USB调试OEM解锁"><br>平板上安装好 <a href="https://www.coolapk.com/apk/com.topjohnwu.magisk">【magisk】</a> 和 <a href="https://www.coolapk.com/apk/net.imknown.android.forefrontinfo">【底层探测器】</a></p><h3 id="电脑准备"><a href="#电脑准备" class="headerlink" title="电脑准备"></a>电脑准备</h3><ul><li>装好adb驱动和adb、fastboot工具  </li><li>下载安装<a href="https://github.com/bkerler/mtkclient">mtk client</a>、<a href="https://github.com/daynix/UsbDk/releases/">USBDk</a>、<a href="https://python.org/downloads">python</a></li></ul><p>打开终端或cmd，直接输入python，提示以下内容python就安装成功了<br><img src="https://static.wyj5211.top/blog/mtk-root/mtk-root-python.webp" alt="python"><br>接下来解压mtk client，进入它的目录，在这里打开cmd或终端（直接在地址栏输入cmd就行，Win11的终端可以右键打开）<br><img src="https://static.wyj5211.top/blog/mtk-root/mtk-root-opencmd.webp" alt="cmd"><br>终端里面输入</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pip config <span class="token builtin class-name">set</span> global.index-url https://pypi.tuna.tsinghua.edu.cn/simple<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>将pip下载源改为清华大学加速下载，然后安装mtk client的依赖</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pip <span class="token function">install</span> <span class="token parameter variable">-r</span> requirements.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="查看当前系统分区类型及槽位"><a href="#查看当前系统分区类型及槽位" class="headerlink" title="查看当前系统分区类型及槽位"></a>查看当前系统分区类型及槽位</h3><p>平板上打开【底层探测器】，划到下面看到<code>A/B无缝升级 状态</code><br>如果是下面这样，则设备为AB分区<br><img src="https://static.wyj5211.top/blog/mtk-root/mtk-root-ab.webp" alt="AB"><br>如果是下面这样，则为A only分区<br><img src="https://static.wyj5211.top/blog/mtk-root/mtk-root-aonly.webp" alt="A only">  </p><h3 id="解bl锁"><a href="#解bl锁" class="headerlink" title="解bl锁"></a>解bl锁</h3><p>adb成功连接平板并授权后，cmd输入以下内容进入fastboot模式</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">adb <span class="token function">reboot</span> bootloader<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>进入后平板黑屏，左下角会有一行小字<code>FASTBOOT MODE</code>，输入以下命令解bl锁</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">fastboot flashing unlock<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>旧机子这一步报错的话使用这条命令</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">fastboot oem unlock<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>接下来屏幕会提示一串英文，这里忘记拍图了，大意是提示你解锁后可以刷入自定义ROM并有数据泄露风险，按音量上键解锁，接下来输入下面内容重启  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">fastboot <span class="token function">reboot</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果开机第一屏提示类似以下内容，则已解开bl<br><img src="https://static.wyj5211.top/blog/mtk-root/mtk-root-unlocked.webp" alt="解开了bl">  </p><p>正常开机后再将平板关机接下来又转到电脑操作<br>如果这步解bl失败，你可以先往下看，下面有强解bl的方法</p><h3 id="使用mtk-client提取boot镜像"><a href="#使用mtk-client提取boot镜像" class="headerlink" title="使用mtk client提取boot镜像"></a>使用mtk client提取boot镜像</h3><p>在mtk client解压目录打开cmd或终端，打开mtk client</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">python mtk_gui<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>不出意外你会看到以下界面，出了意外就去检查前面步骤是否做完，<strong>特别是安装依赖和驱动那里</strong><br><img src="https://static.wyj5211.top/blog/mtk-root/mtk-root-connect1.webp" alt="连接1"><br>接下来将数据线插到电脑usb口，按住平板音量+-，插入C口到平板，平板上不应该有任何提示，而电脑上应该看到以下内容（注意左边终端里的内容）<br><img src="https://static.wyj5211.top/blog/mtk-root/mtk-root-connect2.webp" alt="连接2"><br>然后断开平板数据线，按住音量加减，再插入平板，这时候软件应该变成这样<br><img src="https://static.wyj5211.top/blog/mtk-root/mtk-root-connect3.webp" alt="连接3"><br>如果前面解bl失败，可以尝试用这个软件来强解<br><img src="https://static.wyj5211.top/blog/mtk-root/mtk-root-bl.webp" alt="强解bl"><br>软件切换到<code>读取分区</code>，我这块平板是VAB分区的，并且上面底层探测器显示当前是A槽位，提取<code>boot_a</code>就行<br>（如果是A only分区，则这里分区名应该只有<code>boot</code>，不分ab）<br><img src="https://static.wyj5211.top/blog/mtk-root/mtk-root-getbootimg.webp" alt="读分区"><br>勾选<code>boot_a</code>，然后按右边读取分区，选择的文件夹里应该会多出一个<code>boot_a.bin</code>，进去把拓展名<code>.bin</code>改为<code>.img</code><br>你也可以在这里把全部分区除了<code>userdata</code>外备份，以防意外<br>拔掉数据线，平板开机进系统  </p><h3 id="用magisk修补boot"><a href="#用magisk修补boot" class="headerlink" title="用magisk修补boot"></a>用magisk修补boot</h3><p>连上电脑，电脑进入存有<code>boot_a.img</code>的文件夹，用adb将boot文件推送到平板  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">adb push boot_a.img /sdcard/Download<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>平板上打开magisk，以修补文件方式安装，这一步就不多说了<br>将修补好的镜像再拉取回电脑  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">adb pull /sdcard/Download/magisk_patched-*<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>拉回来文件拓展名再改回<code>.bin</code><br>接下来再打开mtk client，切换到写入分区<br><img src="https://static.wyj5211.top/blog/mtk-root/mtk-root-flashbootimg.webp" alt="写分区"><br>选择magisk修补好的镜像，写入<code>boot_a</code>或者<code>boot_b</code>或者<code>boot</code><br>写完后退出软件，拔掉线，开机后就成功root了<br><img src="https://static.wyj5211.top/blog/mtk-root/mtk-root-final.webp" alt="magisk"></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;关于&quot;&gt;&lt;a href=&quot;#关于&quot; class=&quot;headerlink&quot; title=&quot;关于&quot;&gt;&lt;/a&gt;关于&lt;/h2&gt;&lt;p&gt;家里人买了一台mtk芯片的杂牌“学习平板”，这篇文章是我给它刷入magisk的折腾过程&lt;br&gt;提示：这篇文章可能也适用于一部分mtk芯片的山寨机，或者是一些年久失修，无法得到官方维护的mtk芯片手机  &lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>在Termux上访问USB设备</title>
    <link href="https://blog.wyj5211.top/archives/termux-usb.html"/>
    <id>https://blog.wyj5211.top/archives/termux-usb.html</id>
    <published>2023-01-22T04:20:29.000Z</published>
    <updated>2024-08-26T09:31:30.122Z</updated>
    
    <content type="html"><![CDATA[<p>Wiki原文：<a href="https://wiki.termux.com/wiki/Termux-usb">Termux Wiki</a>  </p><hr><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>由于Android系统的限制，程序不能直接访问USB设备，需要通过Java API去请求USB设备描述符来控制USB设备，这使得在Linux上能直接访问USB设备的程序要在Termux上正常使用，需要用一种曲线救国的方法  </p><span id="more"></span><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p>前置条件：安装<strong>相同渠道</strong>的Termux和Termux:API<br>可以去Fdroid下载  <a href="https://f-droid.org/zh_Hans/packages/com.termux/">Termux</a>   <a href="https://f-droid.org/zh_Hans/packages/com.termux.api/">Termux:API</a>  </p><h2 id="开始操作"><a href="#开始操作" class="headerlink" title="开始操作"></a>开始操作</h2><p>进入Termux环境后 用apt安装下列软件包：<br><code>termux-api</code>  <code>libusb</code>  <code>clang</code> （后两个可以不装，只是后文用来演示使用示例的）  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">apt</span> update <span class="token operator">&amp;&amp;</span> <span class="token function">apt</span> <span class="token function">install</span> termux-api libusb clang<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>接下来掏出你的OTG转换接头，打开手机的OTG功能，有些厂商的OTG功能默认开启，而有些需要去设置里面开启，OTG成功开启并插入usb设备到手机后，你可能会在通知栏看到这样一条通知  </p><p><img src="https://static.wyj5211.top/blog/termux-usb/termux-usb-popup.webp" alt="OTG通知"></p><p>然后返回Termux，输入这条命令  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">termux-usb <span class="token parameter variable">-l</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>几秒后会shell中会返回类似这样的文本<br><img src="https://static.wyj5211.top/blog/termux-usb/termux-usb-list.webp" alt="返回USB设备列表"><br>其中 <code>/dev/bus/usb/001/003</code> 是系统挂载USB设备的位置，不同手机可能显示不同，插入多个USB设备显示更多行<br>如果卡在这一步不动或者返回一对方框[]，要把<strong>Termux:API</strong>的 <strong>自启动、关联启动、后台运行</strong> 的权限放行，并检查OTG功能是否启用、USB设备是否正确连接手机  </p><p>然后输入这条命令使Termux获得USB设备的控制权  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">termux-usb <span class="token parameter variable">-r</span> /dev/bus/usb/001/003  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>后面那串长路径填入之前返回的文本的路径，多个USB设备要一次填一个  </p><p>出现下面的弹窗后点确定<br><img src="https://static.wyj5211.top/blog/termux-usb/termux-usb-confirm.webp" alt="出现弹窗后点确定"><br>Termux就获得了这个USB设备的控制权，并在shell中提示 <code>Access granted</code>  </p><p>然后就可以在Termux里面，在要访问USB设备的程序前加上前缀 <code>termux-usb -e + 目标命令</code>来使用USB设备了  </p><h2 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h2><p>下面是一个官方示例，用来查看USB设备基本信息的C语言程序  </p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;assert.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;libusb-1.0/libusb.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    libusb_context <span class="token operator">*</span>context<span class="token punctuation">;</span>    libusb_device_handle <span class="token operator">*</span>handle<span class="token punctuation">;</span>    libusb_device <span class="token operator">*</span>device<span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">libusb_device_descriptor</span> desc<span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> buffer<span class="token punctuation">[</span><span class="token number">256</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> fd<span class="token punctuation">;</span>    <span class="token function">assert</span><span class="token punctuation">(</span><span class="token punctuation">(</span>argc <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token function">sscanf</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>fd<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">libusb_set_option</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> LIBUSB_OPTION_NO_DEVICE_DISCOVERY<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">assert</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">libusb_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>context<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">assert</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">libusb_wrap_sys_device</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">intptr_t</span><span class="token punctuation">)</span> fd<span class="token punctuation">,</span> <span class="token operator">&amp;</span>handle<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    device <span class="token operator">=</span> <span class="token function">libusb_get_device</span><span class="token punctuation">(</span>handle<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">assert</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">libusb_get_device_descriptor</span><span class="token punctuation">(</span>device<span class="token punctuation">,</span> <span class="token operator">&amp;</span>desc<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Vendor ID: %04x\n"</span><span class="token punctuation">,</span> desc<span class="token punctuation">.</span>idVendor<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Product ID: %04x\n"</span><span class="token punctuation">,</span> desc<span class="token punctuation">.</span>idProduct<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">assert</span><span class="token punctuation">(</span><span class="token function">libusb_get_string_descriptor_ascii</span><span class="token punctuation">(</span>handle<span class="token punctuation">,</span> desc<span class="token punctuation">.</span>iManufacturer<span class="token punctuation">,</span> buffer<span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Manufacturer: %s\n"</span><span class="token punctuation">,</span> buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">assert</span><span class="token punctuation">(</span><span class="token function">libusb_get_string_descriptor_ascii</span><span class="token punctuation">(</span>handle<span class="token punctuation">,</span> desc<span class="token punctuation">.</span>iProduct<span class="token punctuation">,</span> buffer<span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Product: %s\n"</span><span class="token punctuation">,</span> buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">libusb_get_string_descriptor_ascii</span><span class="token punctuation">(</span>handle<span class="token punctuation">,</span> desc<span class="token punctuation">.</span>iSerialNumber<span class="token punctuation">,</span> buffer<span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Serial No: %s\n"</span><span class="token punctuation">,</span> buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">libusb_exit</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>编辑完存为 usbtest.c 然后用gcc编译  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">gcc usbtest.c -lusb-1.0 <span class="token parameter variable">-o</span> usbtest  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>编译完就可以执行试试了  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">chmod</span> +x usbtest <span class="token operator">&amp;&amp;</span> termux-usb <span class="token parameter variable">-e</span> ./usbtest /dev/bus/usb/001/003 <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>示例使用了一个读卡器，下面是返回结果<br><img src="https://static.wyj5211.top/blog/termux-usb/termux-usb-end.webp" alt="一个读卡器的设备基本信息"></p><p>Termux成功返回了读卡器的基本信息  </p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Wiki原文：&lt;a href=&quot;https://wiki.termux.com/wiki/Termux-usb&quot;&gt;Termux Wiki&lt;/a&gt;  &lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;由于Android系统的限制，程序不能直接访问USB设备，需要通过Java API去请求USB设备描述符来控制USB设备，这使得在Linux上能直接访问USB设备的程序要在Termux上正常使用，需要用一种曲线救国的方法  &lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>为Typecho、WordPress等博客框架开启伪静态</title>
    <link href="https://blog.wyj5211.top/archives/rewrite-url.html"/>
    <id>https://blog.wyj5211.top/archives/rewrite-url.html</id>
    <published>2023-01-21T12:15:50.000Z</published>
    <updated>2024-08-26T09:32:13.170Z</updated>
    
    <content type="html"><![CDATA[<p>以便去除链接中出现的<code>index.php</code>，并获得更好的SEO  </p><span id="more"></span><h3 id="Nginx环境"><a href="#Nginx环境" class="headerlink" title="Nginx环境"></a>Nginx环境</h3><p>在nginx配置文件夹下（默认在<code>/etc/nginx</code>）进入<code>sites-available</code>，根据默认配置新建一个<code>yourdomain.conf</code>，在<code>location /</code>段加上  </p><pre class="line-numbers language-conf" data-language="conf"><code class="language-conf"># 伪静态重写if (!-e $request_filename)&#123;rewrite ^(.*)$ &#x2F;index.php$1 last;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>或者  </p><pre class="line-numbers language-conf" data-language="conf"><code class="language-conf">try_files $uri $uri&#x2F; &#x2F;index.php?$args;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>保存后将该文件链接到<code>sites-enabled</code>文件夹   </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ln</span> <span class="token parameter variable">-s</span> /etc/nginx/sites-available/yourdomain.conf /etc/nginx/sites-enabled/yourdomain.conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后重启nginx即可  </p><h3 id="Apache环境"><a href="#Apache环境" class="headerlink" title="Apache环境"></a>Apache环境</h3><p>在网站根目录新建文件<code>.htaccess</code>，填入以下内容  </p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>IfModule</span> <span class="token attr-name">mod_rewrite.c</span><span class="token punctuation">></span></span>RewriteEngine OnRewriteBase /RewriteCond %&#123;REQUEST_FILENAME&#125; !-fRewriteCond %&#123;REQUEST_FILENAME&#125; !-dRewriteRule ^(.*)$ index.php [L,E=PATH_INFO:$1]<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>IfModule</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>保存即可，配置立即生效</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;以便去除链接中出现的&lt;code&gt;index.php&lt;/code&gt;，并获得更好的SEO  &lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
</feed>
